// the following program adds a constant value (val) to (n) memory locations and
// ... and stores the sum back only if it's less than a (max) value
// n    -> 0x0 of data.mem
// val  -> 0x1 of data.mem
// max  -> 0x2 of data.mem

8c010000     // lw    $1, 0x0000($0)
8c020004     // lw    $2, 0x0004($0)
8c030008     // lw    $3, 0x0008($0)
00000000 
2004000C     // addi  $4, $0, 0x000c
2021ffff     // addi  $1, $1, 0xffff
00000000 
8c850000     // lw    $5, 0x0000($4)
00000000 
20840004     // addi  $4, $4, 0x0004
00a22820     // add   $5, $5, $2
00000000
00000000 
00a3302a     // slt   $6, $5, $3
00000000 
00000000 
10060008     // beq   $0, $6, 0x0008
00000000
00000000
00000000
ac85fffc     // sw    $5, 0xfffc($4)
10000004     // beq   $0, $0, 0x0004
00000000
00000000
00000000
ac83fffc     // sw    $3, 0xfffc($4)
10010004     // beq   $0, $1, 0x0004
00000000
00000000
00000000
1000ffe6     // beq   $6, $0, 0xFFE6
00000000
00000000
00000000
20020000     // addi  $2, $0, 0xFFFF
20030000     // addi  $3, $0, 0xFFFF
20040000     // addi  $4, $0, 0xFFFF
20050000     // addi  $5, $0, 0xFFFF
20060000     // addi  $6, $0, 0xFFFF
00000000 
00000000 
1000FFFF     // beq   $0, $0, 0xFFFF
00000000 
00000000 
00000000 
00000000 
00000000 
00000000 
00000000 
00000000 
00000000 
00000000 
00000000 
00000000 
00000000 
00000000 
00000000 
00000000 
00000000 
00000000 
00000000 
00000000 
00000000 
00000000 